// Maison Birks
var _inside = _inside || [];
// var _inside = [];
var _insideLoaded = _insideLoaded || false;
var _insideJQ = _insideJQ || null;

(function () {
	if (_insideLoaded)
		return;
	_insideLoaded = true;

	var insideAccountKey = "IN-1001146";
	var insideTrackerURL = "us3-cdn.inside-graph.com";
	var subsiteId = "42";
	var insideOrderTotal = insideOrderTotal || 0;
	var _insideMaxLoop = 25;
	var _insideCurLoop = 0;
	var _insideFirstLoad = false;
	var _insideCurrency = null;

	// Utility Functions
	function log() {
		if (typeof (console) != "undefined" && typeof (console.log) != "undefined") {
			// console.log("[INSIDE]", Array.prototype.slice.call(arguments));
		}
	}

	function deferWait(callback, test) {
		if (test()) {
			callback();
			return;
		}
		var _interval = 10;
		var _spin = function () {
			if (test()) {
				callback();
			}
			else {
				_interval = _interval >= 1000 ? 1000 : _interval * 2;
				setTimeout(_spin, _interval);
			}
		};
		setTimeout(_spin, _interval);
	}

	function keepWait(callback, test) {
		if (test()) {
			callback();
			if (_insideCurLoop >= _insideMaxLoop) {
				return;
			}
		}
		var _interval = 1000;
		var _spin = function () {
			if (test()) {
				_insideCurLoop = _insideCurLoop + 1;
				callback();
				if (_insideCurLoop >= _insideMaxLoop) {
					return;
				}
			}
			setTimeout(_spin, _interval);
		};
		setTimeout(_spin, _interval);
	}

	var indexOf = [].indexOf || function (prop) {
		for (var i = 0; i < this.length; i++) {
			if (this[i] === prop)
				return i;
		}
		return -1;
	};

	function myTrim(text) {
		try {
			if (typeof (text) != "undefined" && text != null)
				return typeof (text.trim) === "function" ? text.trim() : text.replace(/^\s+|\s+$/gm, '');
		} catch (trimex) { }

		return text;
	}

	function isNumeric(n) {
		try {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}
		catch (tempex) {
		}

		return false;
	}

	function validateEmail(tempmail) {
		try {
			if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(tempmail)) {
				return (true);
			}
		} catch (tempex) { }
		return (false);
	}

	function setCookie(cname, cvalue, exdays) {
		var hostName = window.location.hostname;
		var siteNameFragments = hostName.split(".");
		var siteName = siteNameFragments[1];
		var domain = siteNameFragments.slice(1, siteNameFragments.length).join(".");

		var d = new Date();
		d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
		var expires = "expires=" + d.toGMTString();
		document.cookie = cname + "=" + cvalue + "; " + expires + ";path=/" + ";domain=." + domain;
	}

	function getCookie(cname) {
		var name = cname + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = myTrim(ca[i]);
			if (c.indexOf(name) == 0)
				return c.substring(name.length, c.length);
		}
		return null;
	}

	function deleteCookie(cname) {
		document.cookie = cname + "=" + 0 + "; " + "expires=01 Jan 1970 00:00:00 GMT" + ";path=/";
	}

	function roundToTwo(num) {
		if (Math != "undefined" && Math.round != "undefined")
			return +(Math.round(num + "e+2") + "e-2");
		else
			return num;
	}

	function getSearchParameters() {
		var prmstr = window.location.search.substring(1);
		return prmstr != null && prmstr != "" ? transformToAssocArray(prmstr) : [];
	}

	function transformToAssocArray(prmstr) {
		var params = [];
		var prmarr = prmstr.split("&");
		for (var i = 0; i < prmarr.length; i++) {
			params[i] = prmarr[i];
		}

		return params;
	}

	function randomIntFromInterval(min, max) {
		try {
			return Math.floor(Math.random() * (max - min + 1) + min);
		}
		catch (tempex) {
		}

		return min;
	}

	function getDecimalSign(number) {
		try {
			var tempnum = myTrim(number);

			if (tempnum.length > 3) {
				return tempnum.charAt(tempnum.length - 3);
			}
		}
		catch (signex) {
		}

		return ".";
	}

	// End of utility functions

	function processInside(tracker) {
		var searchUrl = "/search";
		var searchQueryString = null;
		var productCategoryUrl = null;
		var productCategoryQueryString = null;
		var productUrl = null;
		var productQueryString = null;
		var checkoutUrl = "/cart|/checkout";
		var checkoutQueryString = null;
		var orderConfirmedUrl = null; // https://dev.maisonbirks.com/on/demandware.store/Sites-maison-birks-ca-Site/en_CA/Order-Confirm
		var orderConfirmedQueryString = null;

		function getViewData() {
			try {

				// Output view data
				// Default view data is "unknown"

				var insidedata = {};

				insidedata.action = "trackView";
				insidedata.type = "article";
				insidedata.url = window.location.href;
				insidedata.name = "Unknown Page: " + window.location.href;
				var tempurl = window.location.href.toLowerCase();

				var temppath = window.location.pathname;
				var temp_loc = temppath.split("/");
				var page = "";

				var add_tags = [];
				var params = getSearchParameters();
				var searchterm = "Search"; // Find the searchterm the
				// visitor
				// entered for the search page to be
				// used as the page name
				if (params != null && params.length > 0) {
					for (var i = 0; i < params.length; i++) {
						if (params[i].indexOf("q=") == 0) {
							searchterm = params[i].split("q=")[1];
						}
					}
				}

				for (var i = 1; i < temp_loc.length; i++) {
					if (temp_loc[i] != null && temp_loc[i].length > 0) {
						if (temp_loc[i].indexOf("?") != -1) {
							var temploc = temp_loc[i].split("?")[0];
							if (temploc.length > 0)
								page = temp_loc[i];
						}
						else {
							page = temp_loc[i];
						}
					}
				}
				var curpage = page.split("?")[0];
				insidedata.name = curpage;

				// Identify and assign the correct page type here
				// The part below is actually very flexible, can use
				// dataLayer too
				// sometimes, etc so if needed can also just delete the
				// global
				// variable parts and make your own algorithm. From my
				// experience
				// the following part will rarely work for all websites.

				var temppagetype = "other";
				try {
					if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
						for (var i = dataLayer.length - 1; i >= 0; i--) {
							if (dataLayer[i] && dataLayer[i].currency && dataLayer[i].pageType) {
								temppagetype = dataLayer[i].pageType.toLowerCase();
								_insideCurrency = dataLayer[i].currency;
								break;
							}
						}
					}
				} catch (tempex) { }

				if ((temppath == "/" || curpage == "index.html") && temp_loc.length < 3) {
					insidedata.type = "homepage";
				}
				else if (temppagetype == "homepage") {
					insidedata.type = "homepage";
				}
				else if (temppagetype == "search") {
					insidedata.type = "search";
				}
				else if (temppagetype.indexOf("category") != -1) {
					insidedata.type = "productcategory";
				}
				else if (temppagetype == "product detail") {
					insidedata.type = "product";
				}
				else if (tempurl.indexOf("/login") != -1 || tempurl.indexOf("/register") != -1) {
					insidedata.type = "login";
				}

				if (productCategoryUrl != null) {
					if (tempurl.indexOf(productCategoryUrl.toLowerCase()) > -1) {
						insidedata.type = "productcategory";
					}
				}
				if (productCategoryQueryString != null) {
					var tempelem = _insideJQ(productCategoryQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "productcategory";
					}
				}

				if (searchUrl != null) {
					if (tempurl.indexOf(searchUrl.toLowerCase()) > -1) {
						insidedata.type = "search";
					}
				}
				if (searchQueryString != null) {
					var tempelem = _insideJQ(searchQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "search";
					}
				}

				if (productUrl != null) {
					if (tempurl.indexOf(productUrl.toLowerCase()) > -1) {
						insidedata.type = "product";
					}
				}
				if (productQueryString != null) {
					var tempelem = _insideJQ(productQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "product";
					}
				}

				if (checkoutUrl != null) {
					if (tempurl.search(checkoutUrl.toLowerCase()) > 0) {
						insidedata.type = "checkout";
					}
				}
				if (checkoutQueryString != null) {
					var tempelem = _insideJQ(checkoutQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "checkout";
					}
				}

				if (orderConfirmedUrl != null) {
					if (tempurl.indexOf(orderConfirmedUrl.toLowerCase()) > -1) {
						insidedata.type = "orderconfirmed";
					}
				}
				if (orderConfirmedQueryString != null) {
					var tempelem = _insideJQ(orderConfirmedQueryString);
					if (tempelem != null && tempelem.length > 0) {
						insidedata.type = "orderconfirmed";
					}
				}

				try {
					var temporderconfirm = orderConfirmProcess();
					if (temporderconfirm && temporderconfirm.length > 0) {
						insidedata.type = "orderconfirmed";
					}
				} catch (purchasex) { }

				// Finish identying

				switch (insidedata.type) {
					case "homepage":
						insidedata.name = "Home";
						break;
					case "search":
						insidedata.name = "Search Result Page";
						if (searchterm != null && searchterm.length > 0) {
							insidedata.name = decodeURIComponent(searchterm);
							if (insidedata.name.indexOf("+") != -1) {
								insidedata.name = insidedata.name.replace(/\+/g, ' ');
							}
						}
						break;
					case "productcategory":
						var tempcat = getCategory();
						if (tempcat != null && tempcat.length > 0) {
							if (tempcat.length > 149)
								tempcat = tempcat.substring(0, 149);
							insidedata.category = tempcat;
						}

						var tempPageName = getPageName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;

						break;
					case "product":
						var tempPageName = getPageName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;

						tempPageName = getProductName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;

						var tempcat = getCategory();
						if (tempcat != null && tempcat.length > 0) {
							if (tempcat.length > 149)
								tempcat = tempcat.substring(0, 149);
							insidedata.category = tempcat;
						}

						var tempval = getProductImage();
						if (tempval != null && tempval.length > 0) {
							if (tempval.indexOf("?") != -1)
								tempval = tempval.split("?")[0];
							insidedata.img = tempval;
						}
						else
							insidedata.type = "other";

						var tempsku = getProductSku();
						if (tempsku != null && tempsku.length > 0) {
							insidedata.sku = tempsku;
							insidedata.name = insidedata.name + " - " + tempsku;
						}
						else {
							insidedata.type = "other";
						}

						var tempprice = getProductPrice();
						if (tempprice != null && tempprice > 0)
							insidedata.price = tempprice;
						break;
					case "orderconfirmed":
						insidedata.name = "Order Confirmed";
						break;
					default:
						var tempPageName = getPageName();
						if (tempPageName != null && tempPageName.length > 0)
							insidedata.name = tempPageName;
				}

				if (add_tags.length > 0) {
					insidedata.tags = add_tags.join(",");
				}

				// Get view insidedata from page

				return insidedata;
			}
			catch (ex) {
				log("getViewData error: ", ex);

				var insidedata = {};

				insidedata.action = "trackView";
				insidedata.type = "other";
				insidedata.url = window.location.href;
				insidedata.name = "Error: " + window.location.href;

				return insidedata;
			}
		}

		function getPageName() {
			// Modify if necessary
			try {
				var content = document.getElementsByTagName("title");
				if (typeof (content) != "undefined" && content != null && content.length > 0) {
					var result = content[0].textContent || content[0].innerText;
					if (typeof (result) != "undefined" && result != null && result.length > 0) {
						return myTrim(result);
					}
				}
			} catch (pagenameex) { }

			return null;
		}

		function getProductName() {
			try {
				for (var i = dataLayer.length - 1; i >= 0; i--) {
					if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
						&& typeof (dataLayer[i].ecommerce.detail) != "undefined" && dataLayer[i].ecommerce.detail != null
						&& typeof (dataLayer[i].ecommerce.detail.products) != "undefined" && dataLayer[i].ecommerce.detail.products != null
						&& dataLayer[i].ecommerce.detail.products.length > 0) {
						if (dataLayer[i].ecommerce.detail.products[0].name)
							return dataLayer[i].ecommerce.detail.products[0].name;
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getProductImage() {
			try {
				var ldjsons = _insideJQ('script[type="application/ld+json"]');
				for (var i = 0; i < ldjsons.length; i++) {
					var tempdata = JSON.parse(_insideJQ(ldjsons[i]).last().html().replace(/\n/g, ""));
					if (typeof (tempdata) != "undefined" && tempdata != null && _insideJQ.isArray(tempdata)) {
						for (var l = 0; l < tempdata.length; l++) {
							var tempdetail = tempdata[i];
							if (typeof (tempdetail) != "undefined" && tempdetail != null && typeof (tempdetail["@type"]) != "undefined" && tempdetail["@type"] != null && tempdetail["@type"] == "Product" && typeof (tempdetail.image) != "undefined" && tempdetail.image != null && tempdetail.image.length > 0) {
								if (_insideJQ.isArray(tempdetail.image)) {
									return tempdetail.image[0];
								}
								else
									return tempdetail.image;
							}
						}
					}
					else if (typeof (tempdata) != "undefined" && tempdata != null && typeof (tempdata["@type"]) != "undefined" && tempdata["@type"] != null && tempdata["@type"] == "Product" && typeof (tempdata.image) != "undefined" && tempdata.image != null && tempdata.image.length > 0) {
						if (_insideJQ.isArray(tempdata.image)) {
							return tempdata.image[0];
						}
						else
							return tempdata.image;
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getProductPrice() {
			try {
				for (var i = dataLayer.length - 1; i >= 0; i--) {
					if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
						&& typeof (dataLayer[i].ecommerce.detail) != "undefined" && dataLayer[i].ecommerce.detail != null
						&& typeof (dataLayer[i].ecommerce.detail.products) != "undefined" && dataLayer[i].ecommerce.detail.products != null
						&& dataLayer[i].ecommerce.detail.products.length > 0) {
						if (dataLayer[i].ecommerce.detail.products[0].price)
							return dataLayer[i].ecommerce.detail.products[0].price;
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getProductSku() {
			try {
				for (var i = dataLayer.length - 1; i >= 0; i--) {
					if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
						&& typeof (dataLayer[i].ecommerce.detail) != "undefined" && dataLayer[i].ecommerce.detail != null
						&& typeof (dataLayer[i].ecommerce.detail.products) != "undefined" && dataLayer[i].ecommerce.detail.products != null
						&& dataLayer[i].ecommerce.detail.products.length > 0) {
						if (dataLayer[i].ecommerce.detail.products[0].id)
							return dataLayer[i].ecommerce.detail.products[0].id;
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getCategory() {
			try {
				for (var i = dataLayer.length - 1; i >= 0; i--) {
					if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
						&& typeof (dataLayer[i].ecommerce.detail) != "undefined" && dataLayer[i].ecommerce.detail != null
						&& typeof (dataLayer[i].ecommerce.detail.products) != "undefined" && dataLayer[i].ecommerce.detail.products != null
						&& dataLayer[i].ecommerce.detail.products.length > 0) {
						if (dataLayer[i].ecommerce.detail.products[0].category)
							return dataLayer[i].ecommerce.detail.products[0].category;
					}
				}
			}
			catch (tempex) {
			}

			try {
				var breadcrumbs = _insideJQ(".breadcrumbs");

				if (breadcrumbs != null && breadcrumbs.length > 0) {
					var path = "";
					for (var i = 1; i < breadcrumbs.length; i++) {
						var temp = breadcrumbs[i].innerText || breadcrumbs[i].textContent;
						var tempelem = breadcrumbs[i].getElementsByTagName("a");
						if (tempelem != null && tempelem.length > 0) {
							temp = tempelem[0].innerText || tempelem[0].textContent;
						}
						temp = myTrim(temp);
						if (temp != "/")
							path += (path != "" ? " / " : "") + temp;
					}
					if (path != "")
						return path;

				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getOrderData() {
			try {
				var data = [];
				var totalprice = 0;
				var orderId = "auto";

				_insideJQ(".minicart .product-line-item").each(function (index) {
					var tempitem = _insideJQ(this);
					var insideitem = {};
					insideitem.action = "addItem";
					insideitem.orderId = orderId;

					var tempremove = tempitem.find(".remove-line-item .remove-btn").data();
					if (tempremove) {
						insideitem.img = tempitem.find(".item-image img.product-image").get(0).currentSrc;
						insideitem.name = tempremove.name;
						var tempitemurl = tempitem.find(".item-image a").prop("href");
						if (tempitemurl != null && tempitemurl.length > 0) {
							insideitem.url = tempitemurl;
						}

						var tempqty = tempitem.find("select.quantity").val();
						insideitem.qty = parseFloat(tempqty);

						var tempprice = tempitem.find(".price .sales .value").first().attr("content");
						tempprice = parseFloat(tempprice.replace(/[^0-9\.\-\+]/g, ""));
						if (isNumeric(tempprice)) {
							insideitem.price = parseFloat(tempprice);
						}

						insideitem.sku = tempremove.pid;

						totalprice = totalprice + (insideitem.price * insideitem.qty);

						data.push(insideitem);
					}
				});

				if (data.length == 0) {
					_insideJQ(".cart .card.product-info").each(function (index) {
						var tempitem = _insideJQ(this);
						var insideitem = {};
						insideitem.action = "addItem";
						insideitem.orderId = orderId;

						var tempremove = tempitem.find("button.remove-product").data();
						if (tempremove) {
							insideitem.img = tempitem.find(".item-image img.product-image").get(0).currentSrc;
							insideitem.name = tempremove.name;
							var tempitemurl = tempitem.find(".item-image a").prop("href");
							if (tempitemurl != null && tempitemurl.length > 0) {
								insideitem.url = tempitemurl;
							}

							var tempqty = tempitem.find("select.quantity").val();
							insideitem.qty = parseFloat(tempqty);

							var tempprice = tempitem.find(".price .sales .value").first().attr("content");
							tempprice = parseFloat(tempprice.replace(/[^0-9\.\-\+]/g, ""));
							if (isNumeric(tempprice)) {
								insideitem.price = parseFloat(tempprice);
							}

							insideitem.sku = tempremove.pid;

							totalprice = totalprice + (insideitem.price * insideitem.qty);

							data.push(insideitem);
						}
					});
				}

				if (data.length > 0) {
					data.push({
						"action": "trackOrder",
						"orderId": orderId,
						"orderTotal": totalprice
					});

					sessionStorage.setItem("insideordertotal", totalprice);

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			try {
				var data = [];
				var totalprice = 0;
				var tempcurrency = null;

				var tempitems = null;
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = dataLayer.length - 1; i >= 0; i--) {
						if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
							&& typeof (dataLayer[i].ecommerce.checkout) != "undefined" && dataLayer[i].ecommerce.checkout != null
							&& typeof (dataLayer[i].ecommerce.checkout.products) != "undefined" && dataLayer[i].ecommerce.checkout.products != null
							&& dataLayer[i].ecommerce.checkout.products.length > 0) {
							tempitems = dataLayer[i].ecommerce.checkout.products;
							if (typeof (dataLayer[i].ecommerce.currencyCode) != "undefined" && dataLayer[i].ecommerce.currencyCode != null && dataLayer[i].ecommerce.currencyCode.length > 0)
								tempcurrency = dataLayer[i].ecommerce.currencyCode.toUpperCase();
							break;
						}
					}
				}

				if (tempitems != null && tempitems.length > 0) {
					for (var i = 0; i < tempitems.length; i++) {
						var tempitem = tempitems[i];

						var insideitem = {
							"action": "addItem",
							"orderId": "auto"
						};

						insideitem.name = tempitem.name;
						insideitem.sku = tempitem.id;
						if (tempitem.category) {
							insideitem.category = tempitem.category;
							if (insideitem.category.length > 149)
								insideitem.category = insideitem.category.substring(0, 149);
						}
						insideitem.price = parseFloat(tempitem.price);
						insideitem.qty = 1;
						if (typeof (tempitem.quantity) != "undefined" && tempitem.quantity != null)
							insideitem.qty = parseFloat(tempitem.quantity);

						totalprice = totalprice + (insideitem.price * insideitem.qty);

						data.push(insideitem);
					}

					if (data.length > 0) {
						sessionStorage.setItem("insideordertotal", totalprice);

						var orderdata = {
							"action": "trackOrder",
							"orderId": "auto",
							"orderTotal": totalprice
						};

						if (tempcurrency != null) {
							orderdata.data = {};
							orderdata.data.currency = tempcurrency;
						}

						data.push(orderdata);
					}

					return data;
				}
			}
			catch (ex) {
				log("getOrderData error. ", ex);
			}

			return null;
		}

		function orderConfirmProcess() {
			try {
				var data = [];
				var tempcurrency = null;

				var detail = null;
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = 0; i < dataLayer.length; i++) {
						if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null
							&& typeof (dataLayer[i].ecommerce.purchase) != "undefined" && dataLayer[i].ecommerce.purchase != null
							&& typeof (dataLayer[i].ecommerce.purchase.actionField) != "undefined"
							&& dataLayer[i].ecommerce.purchase.actionField != null
							&& typeof (dataLayer[i].ecommerce.purchase.actionField.id) != "undefined"
							&& dataLayer[i].ecommerce.purchase.actionField.id != null
							&& dataLayer[i].ecommerce.purchase.actionField.id.length > 0) {
							detail = dataLayer[i].ecommerce.purchase;
							if (typeof (dataLayer[i].ecommerce.currencyCode) != "undefined" && dataLayer[i].ecommerce.currencyCode != null && dataLayer[i].ecommerce.currencyCode.length > 0) {
								tempcurrency = dataLayer[i].ecommerce.currencyCode.toUpperCase();
							}
						}
					}
				}

				if (detail != null) {
					var totalprice = detail.actionField.revenue;
					var orderID = detail.actionField.id;
					var temppurchasedata = {};

					if (typeof (detail.actionField.shipping) != "undefined" && detail.actionField.shipping != null) {
						temppurchasedata.shipping = detail.actionField.shipping;
					}
					if (typeof (detail.actionField.tax) != "undefined" && detail.actionField.tax != null) {
						temppurchasedata.tax = detail.actionField.tax;
					}
					if (tempcurrency != null) {
						temppurchasedata.currency = tempcurrency;
					}

					// var details = detail.products;

					// for (var i = 0; i < details.length; i++)
					// {
					// var price = details[i].price;
					// var qty = details[i].quantity;
					// var item_name = details[i].name;
					// var sku = details[i].id;
					//
					// data.push({
					// "action" : "addItem",
					// "orderId" : "auto",
					// "name" : myTrim(item_name),
					// "price" : price,
					// "img" : details[i].ImageURL,
					// "sku" : myTrim(sku),
					// "qty" : qty
					// });
					// }

					if (typeof (orderID) != "undefined" && orderID != null && orderID.length > 0 && orderID != "auto") {
						try {
							var lastOrderID = sessionStorage.getItem("insidelastorderid");
							if (lastOrderID == orderID) {
								return null;
							}
						}
						catch (orderidex) {
						}

						// data.push({
						// "action" : "trackOrder",
						// "orderId" : "auto",
						// "orderTotal" : totalprice
						// });

						data.push({
							"action": "trackOrder",
							"orderId": "auto",
							"newOrderId": orderID,
							"orderTotal": totalprice,
							"data": temppurchasedata,
							"update": true,
							"complete": true
						});

						return data;
					}
				}
			}
			catch (ex) {
				log("orderConfirmProcess error. ", ex);
			}

			try {
				var data = [];
				var tempcurrency = null;

				var detail = null;
				if (typeof (dataLayer) != "undefined" && dataLayer != null && dataLayer.length > 0) {
					for (var i = 0; i < dataLayer.length; i++) {
						if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && dataLayer[i].event && dataLayer[i].event == "purchase" && typeof (dataLayer[i].ecommerce) != "undefined" && dataLayer[i].ecommerce != null && typeof (dataLayer[i].ecommerce.transaction_id) != "undefined" && dataLayer[i].ecommerce.transaction_id != null && dataLayer[i].ecommerce.transaction_id && typeof (dataLayer[i].ecommerce.value) != "undefined" && dataLayer[i].ecommerce.value != null) {
							detail = dataLayer[i].ecommerce;
						}
					}
				}

				if (detail != null) {
					var totalprice = detail.value;
					var orderID = detail.transaction_id;
					var temppurchasedata = {};

					if (typeof (detail.shipping) != "undefined" && detail.shipping != null) {
						temppurchasedata.shipping = detail.shipping;
					}
					if (typeof (detail.tax) != "undefined" && detail.tax != null) {
						temppurchasedata.tax = detail.tax;
					}
					if (tempcurrency != null) {
						temppurchasedata.currency = tempcurrency;
					}

					if (typeof (orderID) != "undefined" && orderID != null && orderID != "auto") {

						try {
							var lastOrderID = sessionStorage.getItem("insidelastorderid");
							if (lastOrderID == orderID) {
								return null;
							}
						}
						catch (orderidex) {
						}

						data.push({
							"action": "trackOrder",
							"orderId": "auto",
							"newOrderId": orderID,
							"orderTotal": totalprice,
							"data": temppurchasedata,
							"update": true,
							"complete": true
						});
					}

					return data;
				}
			}
			catch (ex) {
				log("orderConfirmProcess error. ", ex);
			}

			return null;
		}

		function getVisitorId() {
			try {
				for (var i = dataLayer.length - 1; i >= 0; i--) {
					if (typeof (dataLayer[i]) != "undefined" && dataLayer[i] != null && dataLayer[i] && dataLayer[i].registered && dataLayer[i].email && validateEmail(dataLayer[i].email)) {
						return dataLayer[i].email;
					}
				}
			}
			catch (tempex) {
			}

			return null;
		}

		function getVisitorName() {
			try {
				// Modify to get visitor name if available
			}
			catch (visitidex) {
			}

			return null;
		}

		function getVisitorData() {
			try {
				var tempdata = {};

				var templang = _insideJQ("html").attr("lang");
				if (templang) {
					tempdata.language = templang;
				}

				var tempemail = getVisitorId();
				if (tempemail) {
					tempdata.user_email = tempemail;
				}

				return tempdata;
			}
			catch (visitidex) {
			}

			return null;
		}

		function insertInsideTag() {
			try {
				_insideGraph.processQueue();
			}
			catch (tempex) {
			}
		}

		function sendToInside() {
			try {
				tracker.url = window.location.href;

				var visitorId = getVisitorId();
				if (visitorId != null && visitorId.length > 0) {
					tracker.visitorId = visitorId;
				}

				var visitorName = getVisitorName();
				if (visitorName != null && visitorName.length > 0) {
					tracker.visitorName = visitorName;
				}

				var visitorData = getVisitorData();
				if (visitorData != null) {
					tracker.visitorData = visitorData;
				}

				var view = getViewData();
				if (view != null) {
					if (view.type == "orderconfirmed") {
						var tempconfirm = orderConfirmProcess();
						if (tempconfirm != null && tempconfirm.length > 0) {
							for (var i = 0; i < tempconfirm.length; i++) {
								_inside.push(tempconfirm[i]);

								try {
									if (tempconfirm[i].action == "trackOrder")
										if (typeof (tempconfirm[i].newOrderId) != "undefined" && tempconfirm[i].newOrderId != null)
											sessionStorage.setItem("insidelastorderid", tempconfirm[i].newOrderId);
								}
								catch (tempex) {
								}
							}

							sessionStorage.removeItem("insideordertotal");
						}
						else {
							view.type == "other";
						}
					}
					else {
						var orderData = getOrderData();

						if (orderData != null && orderData.length > 0) {
							for (var i = 0; i < orderData.length; i++) {
								_inside.push(orderData[i]);
								if (orderData[i].action == "trackOrder") {
									view.orderId = orderData[i].orderId;
									view.orderTotal = orderData[i].orderTotal;
									insideOrderTotal = orderData[i].orderTotal;
								}
							}
						}
						else {
							try {
								if (view.url.indexOf("/cart") != -1) {
									sessionStorage.removeItem("insideordertotal");
								}
								else {
									var temptotal = sessionStorage.getItem("insideordertotal");
									if (temptotal != null) {
										var tempcount = _insideJQ(".minicart-total .minicart-quantity").text();
										tempcount = parseFloat(tempcount.replace(/[^0-9\.\-\+]/g, ""));

										if (tempcount > 0) {
											view.orderId = "auto";
											view.orderTotal = temptotal;
										}
									}
								}
							} catch (tempex) { }
						}
					}

					// Add currency code
					try {
						if (_insideCurrency) {
							if (_inside != null && _inside.length > 0) {
								for (var i = 0; i < _inside.length; i++) {
									if (_inside[i].action == "trackOrder") {
										if (typeof (_inside[i].data) == "undefined" || _inside[i].data == null) {
											_inside[i].data = {};
										}

										if (typeof (_inside[i].data.currency) == "undefined" || _inside[i].data.currency == null) {
											_inside[i].data.currency = _insideCurrency;
										}
									}
								}
							}

							if (typeof (view.data) == "undefined" || view.data == null) {
								view.data = {};
							}
							view.data.currency = _insideCurrency;

							if (typeof (tracker.visitorData) == "undefined" || tracker.visitorData == null) {
								tracker.visitorData = {};
							}
							tracker.visitorData.currency = _insideCurrency;
						}
					} catch (currencyex) { }

					_inside.push(view);

					log("Inside Debug: ", _inside);
				}
			}
			catch (sendex) {
				_inside = [];

				_inside.push({
					"action": "trackView",
					"type": "other",
					"name": "Check: " + window.location.href
				});

				log(sendex);
			}

			insertInsideTag();
			if (!_insideFirstLoad)
				_insideFirstLoad = true;
		}

		var tempview = getViewData();
		if (tempview != null && typeof (tempview.type) != "undefined" && tempview.type != null && tempview.type == "orderconfirmed") {
			deferWait(sendToInside, function () {
				var tempconfirm = orderConfirmProcess();
				if (tempconfirm != null && tempconfirm.length > 0) {
					return true;
				}

				return document.readyState != 'loading' && document.readyState != 'interactive';
			});
		}
		else {
			deferWait(sendToInside, function () {
				if (document.readyState != 'loading' && document.readyState != 'interactive') {
					keepWait(sendToInside, function () {
						if (!_insideFirstLoad)
							return false;

						if (typeof (_insideGraph) != "undefined" && _insideGraph != null) {
							var temporderdata = getOrderData();

							if (temporderdata != null && temporderdata.length > 0) {
								for (var i = 0; i < temporderdata.length; i++) {
									if (temporderdata[i].action == "trackOrder") {
										if (insideOrderTotal != temporderdata[i].orderTotal) {
											return true;
										}
									}
								}
							}
							else if (insideOrderTotal > 0) {
								insideOrderTotal = 0;
								return true;
							}
						}

						return false;
					});

					return true;
				}

				return false;
			});
		}
	}

	if (typeof (_insideGraph) != "undefined" && _insideGraph != null && typeof (_insideGraph.current) != "undefined" && _insideGraph.current != null) {
		processInside(_insideGraph.current);
	}
	else {
		var insideTracker = {
			"action": "getTracker",
			"crossDomain": false,
			"account": insideAccountKey
		};

		try {
			var subsiteMapping = {
				"www.maisonbirks.com": "39",
				"www.birks.com": "40"
			};

			var temphostname = window.location.hostname.toLowerCase();
			for (var tempsubsitekey in subsiteMapping) {
				if (subsiteMapping.hasOwnProperty(tempsubsitekey)) {
					if (subsiteMapping[tempsubsitekey] != null) {
						if (temphostname.indexOf(tempsubsitekey) != -1) {
							subsiteId = subsiteMapping[tempsubsitekey];
							break;
						}
					}
				}
			}
		} catch (subsiteex) { }

		if (typeof (subsiteId) != "undefined" && subsiteId != null)
			insideTracker["subsiteId"] = subsiteId;

		_inside.push(insideTracker);

		_inside.push({
			"action": "bind",
			"name": "onload",
			"callback": function (tracker) {
				if (_insideFirstLoad)
					return;

				_insideJQ = _insideGraph.jQuery;

				processInside(tracker)
			}
		});
		(function (w, d, s, u) {
			a = d.createElement(s), m = d.getElementsByTagName(s)[0];
			a.async = 1;
			a.src = u;
			m.parentNode.insertBefore(a, m);
		})(window, document, "script", "//" + insideTrackerURL + "/ig.js");
	}

})();